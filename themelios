#!/usr/bin/env bash
# MIT License

# Copyright 2018 Adam Schaefers paxchristi888@gmail.com

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

usage() {
    cat << EOF
    usage:
        themelios configuration.sh git-remote [branch]

for detailed examples and instructions please visit the github page:

    https://github.com/a-schaefers/themelios

EOF
    exit
}

die() {
    [ $# -gt 0 ] && printf -- "%s\n" "$*"
    exit 1
}

start_over() {
    rm -rf /tmp/cloned_remote
    umount -lR /mnt
    swapoff /dev/zvol/"$POOL"/swap/swap0 # # TODO use regular swap zswap sucks
    zpool destroy "$POOL"
}

initial_warning() {
    echo "WARNING: The following script intends to replace all of your disk(s) \
contents with a zfs-on-root NixOS installation and bootstrap your configuration.nix."

    read -p "Ready? (Y or N) " -n 1 -r
    [[ ! $REPLY =~ ^[Yy]$ ]] && die "Aborted."
}

fail_warning() {
    read -p "The previous command failed. Continue running script? (Y or N) " -n 1 -r
    [[ ! $REPLY =~ ^[Yy]$ ]] && die "Aborted."
}

uefi_or_legacy() {
    # detect if this is a uefi installation.
    [[ -d "/sys/firmware/efi/efivars" ]] && uefi_install="1"

    uefi_translate() {
        # some initial translation for whether or not the script was provided disks with sd* or /dev/disk/by-id/*
        echo "${zfs_pool_disks[0]}" | grep -q "/dev/sd" && use_uefi_sdX="1"
        echo "${zfs_pool_disks[0]}" | grep -q "/dev/nvme" && use_uefi_nvme="1"
        if [[ $use_uefi_sdX ]]
        then
            boot_part="2"
            zpool_partition="3"
        elif [[ $use_uefi_nvme ]] # fixes https://github.com/a-schaefers/themelios/issues/2
        then
            boot_part="p2"
            zpool_partition="p3"
        else
            boot_part="-part2"
            zpool_partition="-part3"
        fi
}
    [[ $uefi_install ]] && uefi_translate
}

switch_if_needed() {
    nixos-rebuild switch || fail_warning
}

bootstrap_zfs() {
    sed -i '/imports/a boot.supportedFilesystems = [ \"zfs\" ];' \
        /etc/nixos/configuration.nix
    needs_switch="1"
}

bootstrap_git() {
    sed -i '/imports/a environment.systemPackages = with pkgs; [ git ];' \
        /etc/nixos/configuration.nix
    needs_switch="1"
}

get_custom_nixcfg() {
    # clone the declared repo from git_remote ($2)
    # optional git_branch ($3) may be used additionally for all users who need to build from a non-master branch.

    # github users' https remote will be switched to ssh remote automatically after initial clone.
    # github users also may use the "shorthand" username/repo-name

    github_shorthand=$(echo "$git_remote" | grep -v ".git")
    github_url=$(echo "$git_remote" | grep "github.com")

    checkout_branch() {
        echo "checking out $github_sshremote"
        cd /tmp/cloned_remote || die
        git checkout "$git_branch"
    }

    switch_github_remotes() {
        echo "switching remote from https to $github_sshremote for user convenience..."
        cd /tmp/cloned_remote || die
        git remote set-url origin "$github_sshremote"
    }

    github_clone_and_switch() {
        echo "cloning repo via $github_httpsremote"
        github_httpsremote=https://github.com/$github_user/$github_repo
        github_sshremote=git@github.com:$github_user/$github_repo
        git clone "$github_httpsremote" /tmp/cloned_remote || fail_warning
        switch_github_remotes
        [[ $git_branch ]] && checkout_branch
    }

    if [[ $github_url ]]
    then
        github_user=$(echo "$git_remote" | grep github | cut -d '/' -f 4)
        github_repo=$(echo "$git_remote" | grep github | cut -d '/' -f 5)
        github_clone_and_switch

    elif [[ $github_shorthand ]]
    then
        github_user=$(echo "$git_remote" | cut -d '/' -f 1)
        github_repo=$(echo "$git_remote" | cut -d '/' -f 2)
        github_clone_and_switch

    else
        echo "cloning repo via $git_remote"
        git clone "$git_remote" /tmp/cloned_remote || fail_warning
        [[ $git_branch ]] && checkout_branch
    fi

    # to find the users configuration.sh file:
    # first we simply use "./the/path/to/$1" if the user provides it.
    # second if $1 has no slashes, then we search for $1 guessing it maybe a unique filename in the project.
    # third we search again for a unique dirname, but only if the filename search turns up nothing,
    # then we append the literal "/configuration.sh" convention to the unique dirname, making assumption it must be this.
    find_configuration_sh() {
        # if given a unique filename, use the filename to source the config variables.
        # find via 'cd' and '.' gives relative path to file that is needed.
        cd /tmp/cloned_remote || die
        find . -type f -name "$config_dot_sh" | grep "." && \
            config_dot_sh=$(find . -type f -name "$config_dot_sh") && \
            [ ! -e "$config_dot_sh" ] && die "themelios cannot figure out which $config_dot_sh to use. in this case, feed themelios ./the/entire/path to the configuration.sh file you are trying to use with startover=1 pool=$zfs_pool_name and try again."

        # if given a unique dirname, use unique_dirname/configuration.sh convention to source the variables.
        find . -type d -name "$config_dot_sh" | grep "." && \
            config_dot_sh=$(find . -type d -name "$config_dot_sh")/configuration.sh
    }
    # if not given a path with slashes to a configuration.sh file, then use find.
    echo "$config_dot_sh" | grep "/" || find_configuration_sh

    source "$config_dot_sh" || die "$config_dot_sh file not found."
}

disk_prep() {
    sgdisk_clear() {
        for disk_id in "${zfs_pool_disks[@]}"
        do
            echo "clearing disk with sgdisk..."
            sgdisk --zap-all "$disk_id" || fail_warning
        done
    }
    [[ $use_sgdisk_clear == "true" ]] && sgdisk_clear

    wipefs_all() {
        for disk_id in "${zfs_pool_disks[@]}"
        do
            echo "wiping disk signatures with wipefs..."
            wipefs -fa "$disk_id" || fail_warning
        done
    }
    [[ $use_wipefs_all == "true" ]] && wipefs_all

    dd_zero() {
        for disk_id in "${zfs_pool_disks[@]}"
        do
            echo "writing zeros to ${disk_id}..."
            dd if=/dev/zero of="$disk_id" bs=1M oflag=direct status=progress &
        done
        wait
    }
    [[ $use_zero_disks == "true" ]] && dd_zero
}

zpool_create() {
    echo "creating zpool..."
    zpool create -f \
          -o ashift=12 \
          -O compression=lz4 \
          -O atime=on \
          -O relatime=on \
          -O normalization=formD \
          -O xattr=sa \
          -m none \
          -R /mnt \
          $zfs_pool_name \
          $zfs_pool_type \
          ${zfs_pool_disks[@]/%/$zpool_partition} || fail_warning

    # https://github.com/NixOS/nixpkgs/issues/16954
    zfs set acltype=posixacl "$zfs_pool_name"
}

# TODO
disk_part() {
    for disk_id in "${zfs_pool_disks[@]}"
    do
        sgdisk -og "$disk_id"
        echo "making bios boot partition..."
        sgdisk -a 1 -n 1:48:2047 -t 1:ef02 -c 1:"bios boot partition" "$disk_id" || fail_warning
        echo "making 1G /boot fat32 ESP..."
        sgdisk -n 2:4096:2101247 -c 2:"EFI System Partition" -t 2:ef00 "$disk_id" || fail_warning
        echo "making zpool partition with remainder of space..."
        sgdisk -n 3:2101248:"$(sgdisk -E "$disk_id")" -c 3:"Linux ZPOOL Partition" -t 3:8300 "$disk_id" || fail_warning
        sgdisk -p "$disk_id" || fail_warning
        partx -u "$disk_id"
    done
}

# TODO
mount_boots() {
    # make fat32 for /boot on all disks
    for disk_id in "${zfs_pool_disks[@]}"
    do
        mkfs.vfat -F32 "${disk_id}${boot_part}" || fail_warning
        mkdir "/mnt/boot${bootnum}"
        mount "${disk_id}${boot_part}" "/mnt/boot${bootnum}"
        ((bootnum++))
    done
}

mount_create_datasets() {
    echo "Creating and mounting datasets in /mnt..."
    # / (root) datasets
    zfs create -o mountpoint=none -o canmount=off "$zfs_pool_name/ROOT"
    zfs create -o mountpoint=legacy -o canmount=on "$zfs_pool_name/ROOT/nixos"
    mount -t zfs "$zfs_pool_name/ROOT/nixos" /mnt
    zpool set bootfs="$zfs_pool_name/ROOT/nixos" "$zfs_pool_name"

    # create/mount /boot
    [[ $uefi_install ]] && uefi_mkfs
    [[ ! $uefi_install ]] && legacy_mkfs

    # mount /nix outside of the root dataset
    zfs create -o mountpoint=none -o canmount=off "$zfs_pool_name/NIX"
    zfs create -o mountpoint=legacy -o canmount=on "$zfs_pool_name/NIX/nix"
    mkdir /mnt/nix
    mount -t zfs "$zfs_pool_name/NIX/nix" /mnt/nix

    mkdir -p /mnt/{home,tmp}

    # /home datasets
    zfs create -o mountpoint=none -o canmount=off "$zfs_pool_name"/HOME
    zfs create -o mountpoint=legacy -o canmount=on "$zfs_pool_name"/HOME/home
    mount -t zfs "$zfs_pool_name/HOME/home" /mnt/home

    # /tmp datasets
    zfs create -o mountpoint=none -o canmount=off "$zfs_pool_name"/TMP
    zfs create -o mountpoint=legacy -o canmount=on -o sync=disabled "$zfs_pool_name"/TMP/tmp
    mount -t zfs "$zfs_pool_name/TMP/tmp" /mnt/tmp

    zfs_auto_snapshot() {
        for dataset in "${zfs_auto_snapshot[@]}"
        do
            echo "Setting property com.sun:auto-snapshot=true to ${dataset}..."
            zfs set com.sun:auto-snapshot=true "$dataset"
        done
    }
    zfs_auto_snapshot
}

bootstrap_nixcfg() {
    echo "moving repo from /tmp to /mnt/$nix_repo_name..."
    cp -a /tmp/cloned_remote "/mnt/$nix_repo_name"

    # this is for generating our ./hardware-configuration.nix files.
    # ./configuration.nix will be overwritten shortly hereafter.
    echo "executing nixos-generate-config --root /mnt"
    nixos-generate-config --root /mnt || fail_warning

    echo "generating random hostid..."
    zfs_host_id="$(head -c4 /dev/urandom | od -A none -t x4 | cut -d ' ' -f 2)"
    echo "$zfs_host_id"

    # strip potential prefixed './'
    nix_top_level_configuration=$(echo "$nix_top_level_configuration" | sed 's|^./||')
    # strip potential trailing '/'
    nix_top_level_configuration=${nix_top_level_configuration%/}

    # create /mnt/etc/nixos/configuration.nix and import user's top_level_nixfile.
    # maybe create /mnt/etc/nixos/zfs-configuration.nix
    # maybe append extra configured options to zfs-configuration.nix
    # maybe populate configuration.nix networking.host_id = \"$zfs_host_id\";
    if [[ $nix_zfs_configuration_enabled == "true" ]]
    then
        maybe_create_zfs_configuration="./zfs-configuration.nix"
    else
        maybe_append_host_id="networking.host_id = \"$zfs_host_id\";"
    fi
    cat << EOF > /mnt/etc/nixos/configuration.nix
{ ... }:
{ imports = [
../../$nix_repo_name/$nix_top_level_configuration
./hardware-configuration.nix
$maybe_create_zfs_configuration
];
$maybe_append_host_id
}
EOF

    [[ $nix_zfs_configuration_enabled == "true" ]] && cat << EOF > /mnt/etc/nixos/zfs-configuration.nix
{ ... }:
{ imports = [];
boot.supportedFilesystems = [ "zfs" ];
$(if [[ $uefi_install ]]
then
cat <<- UEFI

boot.loader = {
efi = {
canTouchEfiVariables = true;
efiSysMountPoint = "/boot"; # use the same mount point here.
};
systemd-boot.enable = true; # (for UEFI systems only)
};

UEFI
else
cat <<- LEGACY

boot.loader.grub.enable = true;
boot.loader.grub.version = 2;
boot.loader.grub.devices = [
$(for disk_id in "${zfs_pool_disks[@]}"
do
echo "\"$disk_id\""
done)
];

LEGACY
fi)

# The 32-bit host id of the machine, formatted as 8 hexadecimal characters.
# You should try to make this id unique among your machines.
networking.hostId = "$zfs_host_id";

# noop, the recommended elevator with zfs.
# shell_on_fail allows to force import manually in the case of zfs import failure.
boot.kernelParams = [ "elevator=noop" "boot.shell_on_fail" ];

# Grub on zfs has been known to have a hard time finding kernels with really/long/dir/paths.
# Copy the kernels to /boot and avoid the issue.
boot.loader.grub.copyKernels = true;

# Uncomment [on a working system] to ensure extra safeguards are active that zfs uses to protect zfs pools:
#boot.zfs.forceImportAll = false;
#boot.zfs.forceImportRoot = false;

$([[ $nix_zfs_configuration_extra_enabled == "true" ]] && cat <<- EXTRA
# Enables periodic scrubbing of ZFS pools.
services.zfs.autoScrub.enable = $nix_zfs_extra_auto_scrub;

# Enable the (OpenSolaris-compatible) ZFS auto-snapshotting service.
services.zfs.autoSnapshot = {
enable = $nix_zfs_extra_auto_snapshot_enabled;
frequent = $nix_zfs_extra_auto_snapshot_frequent;
hourly = $nix_zfs_extra_auto_snapshot_hourly;
daily = $nix_zfs_extra_auto_snapshot_daily;
weekly = $nix_zfs_extra_auto_snapshot_weekly;
monthly = $nix_zfs_extra_auto_snapshot_monthly;
};

# Use gc.automatic to keep disk space under control.
nix.autoOptimiseStore = $nix_zfs_extra_auto_optimise_store;
nix.gc.automatic = $nix_zfs_extra_gc_automatic;
nix.gc.dates = "$nix_zfs_extra_gc_dates";
nix.gc.options = "$nix_zfs_extra_gc_options";

# Clean /tmp automatically on boot.
boot.cleanTmpDir = $nix_zfs_extra_clean_tmp_dir;
EXTRA
)
}
EOF

    # give user a retry option with --show-trace to have a chance to fix imports on another tty. :)
    nixos-install-show-trace() {
        nixos-install "--root /mnt --show-trace $nix_install_opts" || nixos-install_fail_retry
    }

    nixos-install_fail_retry() {
        echo "themelios hint: check /mnt/etc/nixos/configuration.nix and your other files in /mnt/$nix_repo_name before trying again."
        echo "themelios hint: make sure you are using relative path imports for all of your .nix files."
        read -p "nixos-install --root /mnt failed, retry? will add --show-trace (y or n) " -n 1 -r
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            nixos-install-show-trace
        else
            die "the only steps remaining after nixos-install --root /mnt should be unmounting /mnt and exporting the pool :) good luck."
        fi
    }

    install() {
        echo "executing nixos-install --root /mnt"
        nixos-install "--root /mnt $nix_install_opts" || nixos-install_fail_retry
    }

    install
}

installation_complete() {
    cat << EOF
    nnnnnnnn        nnnnnnnniiiiiiiiiixxxxxxx       xxxxxxx
    n:::::::n       n::::::ni::::::::ix:::::x       x:::::x
    n::::::::n      n::::::ni::::::::ix:::::x       x:::::x
    n:::::::::n     n::::::nii::::::iix::::::x     x::::::x
    n::::::::::n    n::::::n  i::::i  xxx:::::x   x:::::xxx
    n:::::::::::n   n::::::n  i::::i     x:::::x x:::::x
    n:::::::n::::n  n::::::n  i::::i      x:::::x:::::x
    n::::::n n::::n n::::::n  i::::i       x:::::::::x
    n::::::n  n::::n:::::::n  i::::i       x:::::::::x
    n::::::n   n:::::::::::n  i::::i      x:::::x:::::x
    n::::::n    n::::::::::n  i::::i     x:::::x x:::::x
    n::::::n     n:::::::::n  i::::i  xxx:::::x   x:::::xxx
    n::::::n      n::::::::nii::::::iix::::::x     x::::::x
    n::::::n       n:::::::ni::::::::ix:::::x       x:::::x
    n::::::n        n::::::ni::::::::ix:::::x       x:::::x
    nnnnnnnn         nnnnnnniiiiiiiiiixxxxxxx       xxxxxxx
EOF

    umount_export() {
        # TODO use regular swap zswap sucks
        # [[ $zfs_make_swap == "true" ]] && swapoff /dev/zvol/"$zfs_pool_name"/swap/swap0

        echo "unmounting /mnt"
        umount -lR /mnt

        echo "exporting $zfs_pool_name"
        zpool export "$zfs_pool_name"

        read -p "finished. reboot now? (y or n) " -n 1 -r
        [[ $REPLY =~ ^[Yy]$ ]] && reboot
    }

    # pass NOUMOUNT=1 to not unmount /mnt or export the pool after install automatically
    [[ ! ${NOUMOUNT} ]] && umount_export
    exit
}

# start executing code !

[[ $# -lt 2 ]] && usage
[[ $# -gt 3 ]] && usage
config_dot_sh=$1
git_remote=$2
git_branch=$3
[[ ${STARTOVER} ]] && start_over

initial_warning
command -v zfs || bootstrap_zfs
command -v git || bootstrap_git
[[ $needs_switch ]] && switch_if_needed
get_custom_nixcfg
uefi_or_legacy
disk_prep
mount_boots
zpool_create
mount_create_datasets
bootstrap_nixcfg
installation_complete

# TODO
# boot.loader.grub.mirroredBoots
